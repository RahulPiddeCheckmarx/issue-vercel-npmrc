pipeline {
    agent { label 'argo-uat' }
   
environment{
        ARTIFACTORY_URL=credentials('MY_REGISTRY')
}
    stages {
        stage('Git checkout Codebase') {
        steps {
        git credentialsId: 'jenkins-user-for-xyz-artifact-repository', url: 'https://github.com/RahulPiddeCheckmarx/issue-vercel-npmrc', branch: '*/master'
        }}
        stage('Install Dependencies') {
        steps {
        sh 'npm install'
        }}
	}

        stage('Checkmarx scan ') {
            steps {
            step([$class: 'CxScanBuilder', comment: 'argo-mountebank-sit', configAsCode: true, credentialsId: 'checkmarx credentails', customFields: '', 
dependencyScanConfig: [dependencyScanExcludeFolders: 'node_modules, target, test', dependencyScanPatterns: '', dependencyScannerType: 'OSA', 
enableScaResolver: 'MANIFEST', fsaVariables: '', osaArchiveIncludePatterns: '*.zip, *.war, *.ear, *.tgz', overrideGlobalConfig: true, 
pathToScaResolver: '', sastCredentialsId: '', scaAccessControlUrl: 'https://platform.checkmarx.net', scaConfigFile: '', scaCredentialsId: '', 
scaEnvVariables: '', scaResolverAddParameters: '', scaSASTProjectFullPath: '', scaSASTProjectID: '', scaSastServerUrl: '', 
scaServerUrl: 'https://api-sca.checkmarx.net', scaTeamPath: '', scaTenant: '', scaWebAppUrl: 'https://sca.checkmarx.net'], 
excludeFolders: 'node_modules, target, test', exclusionsSetting: 'job', failBuildOnNewResults: false, failBuildOnNewSeverity: 'HIGH', 
filterPattern: '''!**/*.tpl,    !**/_cvs/**/*, !**/.svn/**/*,   !**/.hg/**/*,   !**/.git/**/*,  !**/.bzr/**/*, !**/bin/**/*,
!**/obj/**/*,  !**/backup/**/*, !**/.idea/**/*, !**/*.DS_Store, !**/*.ipr,     !**/*.iws,
!**/*.bak,     !**/*.tmp,       !**/*.aac,      !**/*.aif,      !**/*.iff,     !**/*.m3u, !**/*.mid, !**/*.mp3,
!**/*.mpa,     !**/*.ra,        !**/*.wav,      !**/*.wma,      !**/*.3g2,     !**/*.3gp, !**/*.asf, !**/*.asx,
!**/*.avi,     !**/*.flv,       !**/*.mov,      !**/*.mp4,      !**/*.mpg,     !**/*.rm,  !**/*.swf, !**/*.vob,
!**/*.wmv,     !**/*.bmp,       !**/*.gif,      !**/*.jpg,      !**/*.png,     !**/*.psd, !**/*.tif, !**/*.swf,
!**/*.jar,     !**/*.zip,       !**/*.rar,      !**/*.exe,      !**/*.dll,     !**/*.pdb, !**/*.7z,  !**/*.gz,
!**/*.tar.gz,  !**/*.tar,       !**/*.gz,       !**/*.ahtm,     !**/*.ahtml,   !**/*.fhtml, !**/*.hdm,
!**/*.hdml,    !**/*.hsql,      !**/*.ht,       !**/*.hta,      !**/*.htc,     !**/*.htd, !**/*.war, !**/*.ear,
!**/*.htmls,   !**/*.ihtml,     !**/*.mht,      !**/*.mhtm,     !**/*.mhtml,   !**/*.ssi, !**/*.stm,
!**/*.stml,    !**/*.ttml,      !**/*.txn,      !**/*.xhtm,     !**/*.xhtml,   !**/*.class, !**/*.iml, !Checkmarx/Reports/*.*''', 
incremental: true, generatePdfReport: true, groupId: '19', hideDebugLogs: true, incremental: true, 
password: '{AQAAABAAAAAQKM9N8lSNEeutZaDzCDykXlOxclHTCLRLORUbfGZ/ckQ=}', preset: '36', projectName: 'argo-uat', sastEnabled: true, 
serverUrl: 'http://10.32.0.16:80', sourceEncoding: '6', useOwnServerCredentials: true, username: 'admin@cx', 
vulnerabilityThresholdResult: 'FAILURE', waitForResultsEnabled: true])

            script{
            if (currentBuild.currentResult == "FAILURE")
            {
                sh 'exit 1'
            }
    }}
}

